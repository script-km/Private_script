-- // Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

-- // Vars
local AutoKillEnabled = true -- always ON
local autoSizeLoop
local serverHopLoop
local LockPosition = CFrame.new(-31.8626, 6.0588, 2087.8867)

-- Whitelist usernames (players you want to avoid)
local Whitelist = {
    "shhhh_892",
    "JJJoshligas",
    "david2937471",
    "Larry028372"
}

-- // Functions
local function EquipPunch()
    local tool = LocalPlayer.Backpack:FindFirstChild("Punch")
    if tool then
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum:EquipTool(tool)
        end
    end
end

local function DoPunch()
    local char = LocalPlayer.Character
    local punch = (char and char:FindFirstChild("Punch")) or LocalPlayer.Backpack:FindFirstChild("Punch")
    if punch then
        if punch:FindFirstChild("attackTime") then
            punch.attackTime.Value = 0.001
        end
        for i = 1, 5 do
            pcall(function() punch:Activate() end)
        end
    end
end

local function AutoKillLoop(lockPosition)
    task.spawn(function()
        while AutoKillEnabled do
            local char = LocalPlayer.Character
            local hum = char and char:FindFirstChildOfClass("Humanoid")
            local hrp = char and char:FindFirstChild("HumanoidRootPart")

            -- If alive: lock position + punch
            if char and hum and hum.Health > 0 and hrp then
                if lockPosition then
                    hrp.CFrame = lockPosition
                end
                EquipPunch()
                DoPunch()
            else
                -- Dead: still punch from Backpack
                DoPunch()
            end

            -- Always try to damage other players
            local rHand = char and char:FindFirstChild("RightHand")
            local lHand = char and char:FindFirstChild("LeftHand")

            for _, target in ipairs(Players:GetPlayers()) do
                if target ~= LocalPlayer and target.Character then
                    if not table.find(Whitelist, target.Name) then
                        local root = target.Character:FindFirstChild("HumanoidRootPart")
                        if root then
                            if rHand then
                                firetouchinterest(rHand, root, 1)
                                firetouchinterest(rHand, root, 0)
                            end
                            if lHand then
                                firetouchinterest(lHand, root, 1)
                                firetouchinterest(lHand, root, 0)
                            end
                        end
                    end
                end
            end

            task.wait(0.05)
        end
    end)
end

local function StartAutoSizeNaN()
    if autoSizeLoop then return end
    autoSizeLoop = task.spawn(function()
        while AutoKillEnabled do
            pcall(function()
                ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 0/0)
            end)
            task.wait()
        end
    end)
end

local function StopAutoSizeNaN()
    if autoSizeLoop then
        task.cancel(autoSizeLoop)
        autoSizeLoop = nil
    end
end

-- Server hop function
local function HopServer()
    AutoKillEnabled = false -- stop killing before hop
    pcall(function()
        local servers = {}
        local cursor = ""
        local gameId = 3623096087

        repeat
            local response = game:HttpGet(
                "https://games.roblox.com/v1/games/"..gameId.."/servers/Public?sortOrder=Asc&limit=100"..(cursor ~= "" and "&cursor="..cursor or "")
            )
            local data = HttpService:JSONDecode(response)
            for _, server in ipairs(data.data) do
                if server.playing >= 15 and server.playing <= 20 and server.id ~= game.JobId then
                    TeleportService:TeleportToPlaceInstance(gameId, server.id, LocalPlayer)
                    return
                end
            end
            cursor = data.nextPageCursor or ""
        until cursor == "" or not cursor
    end)
end

-- Server hop loop
local function StartServerHopLoop()
    if serverHopLoop then return end
    serverHopLoop = task.spawn(function()
        while AutoKillEnabled do
            task.wait(60)
            HopServer()
        end
    end)
end

local function StopServerHopLoop()
    if serverHopLoop then
        task.cancel(serverHopLoop)
        serverHopLoop = nil
    end
end

-- Check whitelist players joining
Players.PlayerAdded:Connect(function(player)
    if table.find(Whitelist, player.Name) then
        print("[WHITELIST DETECTED] "..player.Name.." joined. Hopping server...")
        HopServer()
    end
end)

-- Also check already in server
for _, player in ipairs(Players:GetPlayers()) do
    if table.find(Whitelist, player.Name) then
        print("[WHITELIST DETECTED] "..player.Name.." already in server. Hopping...")
        HopServer()
    end
end

-- Auto start as soon as executed
AutoKillLoop(LockPosition)
StartAutoSizeNaN()
StartServerHopLoop()
